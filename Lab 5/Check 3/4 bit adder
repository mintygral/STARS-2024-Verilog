`default_nettype none
// Empty top module

module top (
  // I/O ports
  input  logic hz100, reset,
  input  logic [20:0] pb,
  output logic [7:0] left, right,
         ss7, ss6, ss5, ss4, ss3, ss2, ss1, ss0,
  output logic red, green, blue,

  // UART ports
  output logic [7:0] txdata,
  input  logic [7:0] rxdata,
  output logic txclk, rxclk,
  input  logic txready, rxready
);
// Code here

 fa4 fa4bit(.A(pb[3:0]),.B(pb[7:4]),.Cin(pb[8]),.Cout(right[4]),.S(right[3:0]));

endmodule

module fa(
  input logic A, B, Cin,
  output logic Cout, S
);

// Code here
  assign Cout = (Cin && B) | (A && B) | (A && Cin); // Cout
  assign S = ( ~(A | B) && Cin) | (~(A | Cin) && B) | (~(B | Cin) && A) | ((A && B) && Cin);

endmodule

// Add more modules down here...

module fa4 (
  input logic [3:0] A, B,
  input logic Cin,
  output logic [3:0] S,
  output logic Cout
);

  logic Cout0, Cout1, Cout2;

  fa bit40(.A(A[0]),.B(B[0]),.Cin(Cin),.Cout(Cout0),.S(S[0]));
  fa bit41(.A(A[1]),.B(B[1]),.Cin(Cout0),.Cout(Cout1),.S(S[1]));
  fa bit42(.A(A[2]),.B(B[2]),.Cin(Cout1),.Cout(Cout2),.S(S[2]));
  fa bit43(.A(A[3]),.B(B[3]),.Cin(Cout2),.Cout(Cout),.S(S[3]));

endmodule 