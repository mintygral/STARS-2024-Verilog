`default_nettype none
// Empty top module

module top (
  // I/O ports
  input  logic hz100, reset,
  input  logic [20:0] pb,
  output logic [7:0] left, right,
         ss7, ss6, ss5, ss4, ss3, ss2, ss1, ss0,
  output logic red, green, blue,

  // UART ports
  output logic [7:0] txdata,
  input  logic [7:0] rxdata,
  output logic txclk, rxclk,
  input  logic txready, rxready
);
// Code here

  fa fa1(.A(pb[0]),.B(pb[1]),.Cin(pb[2]),.Cout(right[1]),.S(right[0]));

endmodule

module fa(
  input logic A, B, Cin,
  output logic Cout, S
);

// Code here
  assign Cout = (Cin && B) | (A && B) | (A && Cin); // Cout
  assign S = ( ~(A | B) && Cin) | (~(A | Cin) && B) | (~(B | Cin) && A) | ((A && B) && Cin);

endmodule

// Add more modules down here...

// testbench
`timescale 1ms/10ps
module tb;
  logic A, B, Cin, S, Cout;
  fa fulladder (.A(A), .B(B), .Cin(Cin), .S(S), .Cout(Cout));

  initial begin
    $dumpfile("sim.vcd");
    $dumpvars(0, tb);

    // for loop to test all possible inputs
    for (integer i=0; i<=1; i++) begin
      for (integer j=0; j<=1; j++) begin
        for (integer k=0; k<=1; k++) begin
          A = i; B = j; Cin = k;
          #1;
          $display("A=%b, B=%b, Cin=%b, Cout=%b, S=%b", A,B,Cin,Cout,S);
        end
      end
    end

    #1 $finish;
  end

endmodule
